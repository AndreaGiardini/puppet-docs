---
layout: default
title: "PE 3.7 » Deploying PE » Cert Regeneration: Monolithic Deployments"
subtitle: "Regenerating Certs and Security Credentials in Monolithic Puppet Enterprise Deployments"
canonical: "/pe/latest/trouble_regenerate_certs_monolithic.html"
description: "This page explains how to regenerate all SSL certificates in monolithic Puppet Enterprise deployments."
---

> **Note:** This page explains how to regenerate all certificates in **a monolithic PE deployment** --- that is, where the Puppet master, PuppetDB, and PE console components are all installed on the same server. Instructions for regenerating certs and security credentials in a split or large environment installation will be available soon. 


## Overview

In some cases, you may find that you need to regenerate the certificates and security credentials (private and public keys)  generated by PE's built-in certificate authority (CA). For example, you may have a Puppet master that you need to move to a different network in your infrastructure, or you may find that you need to regenerate all the certificates and security credentials in your infrastructure due to an unforeseen security vulnerability.

Regardless of your situation, regenerating your certificatess involves the following four steps (complete procedures follow below):

1. On your master, you'll clear the certs and security credentials, regenerate the CA, and then regenerate the certs and security credentials.
2. Next, you'll clear and regenerate certs and security credentials for PuppetDB.
3. Then, you'll clear and regenerate certs and security credentials for the PE console.
4. Lastly, you'll clear and regenerate certs and security credentials for all agent nodes.

Note that this process **destroys the certificate authority and all other certificates.** It is meant for use in the event of a total compromise of your site, or some other unusual circumstance. If you just need to replace a few agent certificates, you can use the `puppet cert clean` command on your Puppet master and then follow step four for any agent certs that need to be replaced.

## Step 1: Clear and Regenerate Certs on Your Puppet master

**On your monolithic Puppet master server**:

1. Back up the `/etc/puppetlabs/puppet/ssl/`, `/etc/puppetlabs/puppetdb/ssl/`, and `/opt/puppet/share/puppet-dashboard/certs` directories. 

   If something goes wrong, you may need to restore these directories so your deployment can stay functional. **However,** if you needed to regenerate your certs for security reasons and couldn't, you should contact Puppet Labs support as soon as you restore service so we can help you secure your site.
   
2. Stop the puppet agent service with `sudo puppet resource service pe-puppet ensure=stopped`.
3. Stop the orchestration service with `sudo puppet resource service pe-mcollective ensure=stopped`.
4. Stop the Puppet master service with `sudo puppet resource service pe-httpd ensure=stopped`.
5. Stop the pe-puppetserver service with `sudo pupper resource service pe-puppetserver ensure=stopped`.
6. Clear all certs from your master with `sudo rm -rf /etc/puppetlabs/puppet/ssl/*`.
7. Remove the cached catalog with `rm -f /var/opt/lib/pe-puppet/client_data/catalog/<CERT NAME>.json`.
8. Regenerate the CA by running `sudo puppet cert list -a`. You should see this message: `Notice: Signed certificate request for ca`.
9. Generate the Puppet master's new certs with `sudo Puppet master --no-daemonize --verbose`.
10. When you see `Notice: Starting Puppet master <your Puppet and PE versions>`, type CTRL + C.
11. Copy over the CRL; run the following commands:

    a. `cp /etc/puppetlabs/puppet/ssl/ca/ca_crl.pem /etc/puppetlabs/puppet/ssl/crl.pem`.
   
    b. `sudo chown -R pe-puppet:pe-puppet /etc/puppetlabs/puppet/ssl`.

## Step 2: Clear and Regenerate Certs for PuppetDB

**On your monolithic Puppet master server**: 

1. Stop the PuppetDB service with `sudo puppet resource service pe-puppetdb ensure=stopped`.
2. Clear the certs and security credentials from the PuppetDB SSL directory with `sudo rm -rf /etc/puppetlabs/puppetdb/ssl/*`.
3. Copy the certs and security credentials generated in step 1 for the master node to the PuppetDB SSL directory. Note that the Puppet master, PuppetDB, and PE console share the same agent cert and security credentials. Run the following commands:  

   a. `cp /etc/puppetlabs/puppet/ssl/certs/<CERT NAME>.pem /etc/puppetlabs/puppetdb/ssl/<CERT NAME>.cert.pem`
   
   b. `cp /etc/puppetlabs/puppet/ssl/public_keys/<CERT NAME>.pem /etc/puppetlabs/puppetdb/ssl/<CERT NAME>.public_key.pem`
   
   c. `cp /etc/puppetlabs/puppet/ssl/private_keys/<CERT NAME>.pem /etc/puppetlabs/puppetdb/ssl/<CERT NAME>.private_key.pem`
   
   d. `sudo chown -R pe-puppetdb:pe-puppetdb /etc/puppetlabs/puppetdb/ssl`
   
4. Stop the pe-postgreSQL service; run `sudo puppet resource service pe-postgresql ensure=stopped`.

5. Clear the certs and security credentials from the PostgreSQL certs directory with `sudo rm -rf /opt/puppet/var/lib/pgsql/9.2/data/certs/*`.

6. Copy the certs and security credentials generated in step 1 for the master node to the PostgreSQL certs directory. Run the following commands: 

   a. `cp /etc/puppetlabs/puppet/ssl/certs/<certname>.pem /opt/puppet/var/lib/pgsql/9.2/data/certs/<certname>.cert.pem`

   b. `cp /etc/puppetlabs/puppet/ssl/public_keys/<certname>.pem /opt/puppet/var/lib/pgsql/9.2/data/certs/<certname>.public_key.pem`

   c. `cp /etc/puppetlabs/puppet/ssl/private_keys/<certname>.pem /opt/puppet/var/lib/pgsql/9.2/data/certs/<certname>.private_key.pem`

   d. `sudo chmod 400 /opt/puppet/var/lib/pgsql/9.2/data/certs/*`
   
   e. `sudo chown pe-postgres:pe-postgres /opt/puppet/var/lib/pgsql/9.2/data/certs/*`

## Step 3:  Clear and Regenerate Certs for the PE Console 

**On your monolithic Puppet master server**:

1. Remove all credentials in the puppet-dashboard cert directory with `sudo rm -rf /opt/puppet/share/puppet-dashboard/certs/*`.
2. Create the pe-internal-classifier and pe-internal-dashboard certs. Run the following commands: 

   a. `/opt/puppet/bin/puppet cert generate pe-internal-classifier`
   
   b. `/opt/puppet/bin/puppet cert generate pe-internal-dashboard`

3. Clear the console-services certs directory with `sudo rm -rf /opt/puppet/share/console-services/certs/*`. 

4. Copy the PE agent cert and security credentials to the console-services cert directory. Run the following commands:

   a. `cp /etc/puppetlabs/puppet/ssl/certs/<CERT NAME>.pem /opt/puppet/share/console-services/certs/<CERT NAME>.cert.pem`

   b. `cp /etc/puppetlabs/puppet/ssl/public_keys/<CERT NAME>.pem /opt/puppet/share/console-services/certs/<CERT NAME>.public_key.pem`

   c. `cp /etc/puppetlabs/puppet/ssl/private_keys/<CERT NAME>.pem /opt/puppet/share/console-services/certs/<CERT NAME>.private_key.pem` 

5. Copy the pe-internal-classifier cert and security credentials to the console-services cert directory. Run the following commands: 

   a. `cp /etc/puppetlabs/puppet/ssl/certs/pe-internal-classifier.pem /opt/puppet/share/console-services/certs/pe-internal-classifier.cert.pem`
   
   b. `cp /etc/puppetlabs/puppet/ssl/public_keys/pe-internal-classifier.pem /opt/puppet/share/console-services/certs/pe-internal-classifier.public_key.pem`
   
   c. `cp /etc/puppetlabs/puppet/ssl/private_keys/pe-internal-classifier.pem /opt/puppet/share/console-services/certs/pe-internal-classifier.private_key.pem`
   
6. Copy the pe-internal-dashboard cert and security credentials to the console-services cert directory. Run the following commands:

   a. `cp /etc/puppetlabs/puppet/ssl/certs/pe-internal-dashboard.pem /opt/puppet/share/console-services/certs/pe-internal-dashboard.cert.pem`

   b. `cp /etc/puppetlabs/puppet/ssl/public_keys/pe-internal-dashboard.pem /opt/puppet/share/console-services/certs/pe-internal-dashboard.public_key.pem`

   c. `cp /etc/puppetlabs/puppet/ssl/private_keys/pe-internal-dashboard.pem /opt/puppet/share/console-services/certs/pe-internal-dashboard.private_key.pem`

7. Ensure the console can access the new credentials with `sudo chown -R pe-console-services:pe-console-services /opt/puppet/share/console-services/certs`

8. Copy the agent cert and security credentials to the puppet-dashboard cert directory. Note that the Puppet master, PuppetDB, and PE console share the same agent cert and security credentials. Run the following commands: 

   a. `cp /etc/puppetlabs/puppet/ssl/certs/<CERT NAME>.pem /opt/puppet/share/puppet-dashboard/certs/<CERT NAME>.cert.pem`
   
   b. `cp /etc/puppetlabs/puppet/ssl/public_keys/<CERT NAME>.pem /opt/puppet/share/puppet-dashboard/certs/<CERT NAME>.public_key.pem`
   
   c. `cp /etc/puppetlabs/puppet/ssl/private_keys/<CERTNAME>.pem /opt/puppet/share/puppet-dashboard/certs/<CERT NAME>.private_key.pem`

9. Copy the pe-internal-dashboard cert and security credentials to the puppet-dashboard cert directory. Run the following commands: 

   a. `cp /etc/puppetlabs/puppet/ssl/certs/pe-internal-dashboard.pem /opt/puppet/share/puppet-dashboard/certs/pe-internal-dashboard.cert.pem`
   
   b. `cp /etc/puppetlabs/puppet/ssl/public_keys/pe-internal-dashboard.pem /opt/puppet/share/puppet-dashboard/certs/pe-internal-dashboard.public_key.pem`
   
   c. `cp /etc/puppetlabs/puppet/ssl/private_keys/pe-internal-dashboard.pem /opt/puppet/share/puppet-dashboard/certs/pe-internal-dashboard.private_key.pem`

10. Ensure the console can access the new credentials with `sudo chown -R puppet-dashboard:puppet-dashboard /opt/puppet/share/puppet-dashboard/certs`


##  Step 4: Restart PE Services

Now that all the certs are in place, you will need to restart the PE services you stopped. 

1. Restart the pe-puppetserver service with `sudo puppet resource service pe-puppetserver ensure=running`.
2. Restart the pe-postgreSQL service with `sudo puppet resource service pe-postgresql ensure=running`.
3. Restart the PuppetDB service with `sudo puppet resource service pe-puppetdb ensure=running`.
4. Restart pe-console services. Run, `sudo puppet resource service pe-console-services ensure=running`
5. Restart pe-httpd. Run, `sudo puppet resource service pe-httpd ensure=running`
6. Restart the puppet agent service with `sudo puppet resource service pe-puppet ensure=running`.

## Step 5: Clear and Regenerate Certs for PE Agents

[agent_certs]: #step-5-clear-and-regenerate-certs-for-pe-agents

To replace the certs on agents, you'll need to log into each agent node and do the following:

1. Stop the puppet agent service. On \*nix nodes, run `sudo puppet resource service pe-puppet ensure=stopped`. On Windows nodes, run the same command (minus `sudo`) with Administrator privileges.
2. Stop the orchestration service. On \*nix nodes, run `sudo puppet resource service pe-mcollective ensure=stopped`. On Windows nodes, run the same command (minus `sudo`) with Administrator privileges.
3. Delete the agent's SSL directory. On \*nix nodes, run `sudo rm -r /etc/puppetlabs/puppet/ssl/*`. On Windows nodes, delete the `$confdir\ssl` directory, using the Administrator confdir. [See here for more information on locating the confdir.][confdir]
4. Re-start the puppet agent service. On \*nix nodes, run `sudo puppet resource service pe-puppet ensure=running`. On Windows nodes, run the same command (minus `sudo`) with Administrator privileges.

   Once puppet agent starts, it will automatically generate keys and request a new certificate from the CA Puppet master.
   
5. If you are not using autosigning, you will need to sign each agent node's certificate request. You can do this [with the PE console's request manager][request_manager], or by logging into the CA Puppet master server, running `sudo puppet cert list` to see pending requests, and running `sudo puppet cert sign <NAME>` to sign requests.

Once an agent node's new certificate is signed, it will fetch it automatically within a few minutes and begin a Puppet run. After a node has fetched its new certificate and completed a full Puppet run, it will once again appear in orchestration and live management. If, after waiting for a short time, you don't see the agent node in live management, use NTP to make sure time is in sync across your PE deployment. On Windows nodes, you may need to log into the node and check the status of the Marionette Collective service --- sometimes it can hang while attempting to stop or restart.

> Once you have regenerated all agents' certificates, **everything should now be back to normal and fully functional under the new CA**.

[confdir]: /puppet/3.6/reference/dirs_confdir.html#windows-systems
[request_manager]: ./console_cert_mgmt.html
